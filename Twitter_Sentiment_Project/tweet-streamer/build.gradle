buildscript {
	ext {
		springBootVersion = '2.0.3.RELEASE'
		gradleDockerVersion = "3.4.3"
	}
	repositories {
		mavenCentral()
        jcenter()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.bmuschko:gradle-docker-plugin:${gradleDockerVersion}"
	}

}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'BJSS.twitter-sentiment-project.tweet-streamer'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
    jcenter()
}

dependencies {
	compile "org.springframework.boot:spring-boot-starter-web"
    compile group: 'org.twitter4j', name: 'twitter4j-core', version: '4.0.6'
    compile group: 'org.twitter4j', name: 'twitter4j-stream', version: '4.0.6'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-kinesis', version: '1.11.368'
    testCompile "org.springframework.boot:spring-boot-starter-test"
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
    dependsOn 'cleanTest'
}

apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

task createDockerFile(type: Dockerfile) {
    destFile = project.file('build/docker/Dockerfile')
    from 'openjdk:8'
    maintainer 'Joe Honour "joe.honour@bjss.com"'
    volume '/tmp'
    addFile jar.archiveName, '/tweet-streamer.jar'
    entryPoint 'java'
    defaultCommand '-jar', '/tweet-streamer.jar'
    exposePort 8080
}

task syncWebAppArchive(type: Sync) {
    dependsOn assemble
    from jar.archivePath
    into createDockerFile.destFile.parentFile
}

createDockerFile.dependsOn syncWebAppArchive

task buildDockerImage(type: DockerBuildImage) {
    dependsOn createDockerFile
    inputDir = createDockerFile.destFile.parentFile
    tag = "twitter-sentiment-project/tweet-streamer:${version}"
}

task createDockerContainer(type: DockerCreateContainer) {
    dependsOn buildDockerImage
    targetImageId { buildDockerImage.getImageId() }
    portBindings = ['8080:8080']
}

task startDockerImage(type: DockerStartContainer) {
    dependsOn createDockerContainer
    targetContainerId { createDockerContainer.getContainerId() }
}